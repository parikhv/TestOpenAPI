{
  "swagger": "2.0",
  "info": {
    "version": "2021-04-01",
    "title": "StorageManagementClient",
    "description": "The Azure Storage Management API."
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices": {
      "get": {
        "tags": [
          "BlobService"
        ],
        "operationId": "BlobServices_List",
        "x-ms-examples": {
          "ListBlobServices": {
            "$ref": "./examples/BlobServicesList.json"
          }
        },
        "description": "List blob services of storage account. It returns a collection of one object named default.",
        "parameters": [
          {
            "$ref": "./storage.json#/parameters/ResourceGroupName"
          },
          {
            "$ref": "./storage.json#/parameters/StorageAccountName"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- List blob services operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BlobServiceItems"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
  "definitions": {
    "ContainerProperties": {
      "properties": {
        "version": {
          "type": "string",
          "readOnly": true,
          "description": "The version of the deleted blob container."
        },
        "deleted": {
          "type": "boolean",
          "readOnly": true,
          "description": "Indicates whether the blob container was deleted."
        },
        "deletedTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "Blob container deletion time."
        },
        "remainingRetentionDays": {
          "type": "integer",
          "readOnly": true,
          "description": "Remaining retention days for soft deleted blob container."
        },
        "defaultEncryptionScope": {
          "type": "string",
          "description": "Default the container to use specified encryption scope for all writes."
        },
        "denyEncryptionScopeOverride": {
          "type": "boolean",
          "description": "Block override of encryption scope from the container default."
        },
        "publicAccess": {
          "type": "string",
          "enum": [
            "Container",
            "Blob",
            "None"
          ],
          "x-ms-enum": {
            "name": "PublicAccess",
            "modelAsString": false
          },
          "description": "Specifies whether data in the container may be accessed publicly and the level of access."
        },
        "lastModifiedTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "Returns the date and time the container was last modified."
        },
        "leaseStatus": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Locked",
            "Unlocked"
          ],
          "x-ms-enum": {
            "name": "LeaseStatus",
            "modelAsString": true
          },
          "description": "The lease status of the container."
        },
        "leaseState": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Available",
            "Leased",
            "Expired",
            "Breaking",
            "Broken"
          ],
          "x-ms-enum": {
            "name": "LeaseState",
            "modelAsString": true
          },
          "description": "Lease state of the container."
        },
        "leaseDuration": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Infinite",
            "Fixed"
          ],
          "x-ms-enum": {
            "name": "LeaseDuration",
            "modelAsString": true
          },
          "description": "Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A name-value pair to associate with the container as metadata."
        },
        "immutabilityPolicy": {
          "readOnly": true,
          "$ref": "#/definitions/ImmutabilityPolicyProperties",
          "x-ms-client-name": "ImmutabilityPolicy",
          "description": "The ImmutabilityPolicy property of the container."
        },
        "legalHold": {
          "readOnly": true,
          "$ref": "#/definitions/LegalHoldProperties",
          "description": "The LegalHold property of the container."
        },
        "hasLegalHold": {
          "type": "boolean",
          "readOnly": true,
          "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account."
        },
        "hasImmutabilityPolicy": {
          "type": "boolean",
          "readOnly": true,
          "description": "The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container."
        },
        "immutableStorageWithVersioning": {
          "$ref": "#/definitions/ImmutableStorageWithVersioning",
          "description": "The object level immutability property of the container. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
        }
      },
      "description": "The properties of a container."
    },
    "BlobContainer": {
      "properties": {
        "properties": {
          "$ref": "#/definitions/ContainerProperties",
          "x-ms-client-flatten": true,
          "x-ms-client-name": "ContainerProperties",
          "description": "Properties of the blob container."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v1/types.json#/definitions/AzureEntityResource"
        }
      ],
      "description": "Properties of the blob container, including Id, resource name, resource type, Etag."
    },
    "ImmutabilityPolicyProperty": {
      "properties": {
        "immutabilityPeriodSinceCreationInDays": {
          "type": "integer",
          "description": "The immutability period for the blobs in the container since the policy creation, in days."
        },
        "state": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Locked",
            "Unlocked"
          ],
          "x-ms-enum": {
            "name": "ImmutabilityPolicyState",
            "modelAsString": true
          },
          "description": "The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked."
        },
        "allowProtectedAppendWrites": {
          "type": "boolean",
          "description": "This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API"
        }
      },
      "description": "The properties of an ImmutabilityPolicy of a blob container."
    },
    "ImmutabilityPolicyProperties": {
      "properties": {
        "properties": {
          "$ref": "#/definitions/ImmutabilityPolicyProperty",
          "x-ms-client-flatten": true,
          "description": "The properties of an ImmutabilityPolicy of a blob container."
        },
        "etag": {
          "type": "string",
          "readOnly": true,
          "description": "ImmutabilityPolicy Etag."
        },
        "updateHistory": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/UpdateHistoryProperty"
          },
          "description": "The ImmutabilityPolicy update history of the blob container."
        }
      },
      "description": "The properties of an ImmutabilityPolicy of a blob container."
    },
    "ImmutabilityPolicy": {
      "properties": {
        "properties": {
          "$ref": "#/definitions/ImmutabilityPolicyProperty",
          "x-ms-client-flatten": true,
          "description": "The properties of an ImmutabilityPolicy of a blob container."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v1/types.json#/definitions/AzureEntityResource"
        }
      ],
      "required": [
        "properties"
      ],
      "description": "The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type, Etag."
    },
    "ImmutableStorageWithVersioning": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "This is an immutable property, when set to true it enables object level immutability at the container level."
        },
        "timeStamp": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "Returns the date and time the object level immutability was enabled."
        },
        "migrationState": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "InProgress",
            "Completed"
          ],
          "x-ms-enum": {
            "name": "MigrationState",
            "modelAsString": true
          },
          "description": "This property denotes the container level immutability to object level immutability migration state."
        }
      },
      "description": "Object level immutability properties of the container."
    },
    "UpdateHistoryProperty": {
      "properties": {
        "update": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "put",
            "lock",
            "extend"
          ],
          "x-ms-enum": {
            "name": "ImmutabilityPolicyUpdateType",
            "modelAsString": true
          },
          "description": "The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend."
        },
        "immutabilityPeriodSinceCreationInDays": {
          "type": "integer",
          "readOnly": true,
          "description": "The immutability period for the blobs in the container since the policy creation, in days."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "Returns the date and time the ImmutabilityPolicy was updated."
        },
        "objectIdentifier": {
          "type": "string",
          "readOnly": true,
          "description": "Returns the Object ID of the user who updated the ImmutabilityPolicy."
        },
        "tenantId": {
          "type": "string",
          "readOnly": true,
          "description": "Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy."
        },
        "upn": {
          "type": "string",
          "readOnly": true,
          "description": "Returns the User Principal Name of the user who updated the ImmutabilityPolicy."
        }
      },
      "description": "An update history of the ImmutabilityPolicy of a blob container."
    },
    "LegalHoldProperties": {
      "properties": {
        "hasLegalHold": {
          "type": "boolean",
          "readOnly": true,
          "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagProperty"
          },
          "description": "The list of LegalHold tags of a blob container."
        }
      },
      "description": "The LegalHold property of a blob container."
    },
    "TagProperty": {
      "properties": {
        "tag": {
          "type": "string",
          "readOnly": true,
          "description": "The tag value."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "Returns the date and time the tag was added."
        },
        "objectIdentifier": {
          "type": "string",
          "readOnly": true,
          "description": "Returns the Object ID of the user who added the tag."
        },
        "tenantId": {
          "type": "string",
          "readOnly": true,
          "description": "Returns the Tenant ID that issued the token for the user who added the tag."
        },
        "upn": {
          "type": "string",
          "readOnly": true,
          "description": "Returns the User Principal Name of the user who added the tag."
        }
      },
      "description": "A tag of the LegalHold of a blob container."
    },
    "LegalHold": {
      "properties": {
        "hasLegalHold": {
          "type": "boolean",
          "readOnly": true,
          "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "maxLength": 23,
            "minLength": 3
          },
          "description": "Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP."
        }
      },
      "required": [
        "tags"
      ],
      "description": "The LegalHold property of a blob container."
    },
    "ListContainerItem": {
      "properties": {
        "properties": {
          "$ref": "#/definitions/ContainerProperties",
          "x-ms-client-flatten": true,
          "description": "The blob container properties be listed out."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v1/types.json#/definitions/AzureEntityResource"
        }
      ],
      "description": "The blob container properties be listed out."
    },
    "ListContainerItems": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListContainerItem"
          },
          "description": "List of blobs containers returned.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Request URL that can be used to query next page of containers. Returned when total number of requested containers exceed maximum page size.",
          "readOnly": true
        }
      },
      "description": "Response schema. Contains list of blobs returned, and if paging is requested or required, a URL to next page of containers."
    },
    "BlobServiceProperties": {
      "properties": {
        "properties": {
          "properties": {
            "cors": {
              "$ref": "./common.json#/definitions/CorsRules",
              "description": "Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service."
            },
            "defaultServiceVersion": {
              "type": "string",
              "description": "DefaultServiceVersion indicates the default version to use for requests to the Blob service if an incoming request’s version is not specified. Possible values include version 2008-10-27 and all more recent versions."
            },
            "deleteRetentionPolicy": {
              "$ref": "./common.json#/definitions/DeleteRetentionPolicy",
              "description": "The blob service properties for blob soft delete."
            },
            "isVersioningEnabled": {
              "type": "boolean",
              "description": "Versioning is enabled if set to true."
            },
            "automaticSnapshotPolicyEnabled": {
              "type": "boolean",
              "description": "Deprecated in favor of isVersioningEnabled property."
            },
            "changeFeed": {
              "$ref": "#/definitions/ChangeFeed",
              "description": "The blob service properties for change feed events."
            },
            "restorePolicy": {
              "$ref": "#/definitions/RestorePolicyProperties",
              "description": "The blob service properties for blob restore policy."
            },
            "containerDeleteRetentionPolicy": {
              "$ref": "./common.json#/definitions/DeleteRetentionPolicy",
              "description": "The blob service properties for container soft delete."
            },
            "lastAccessTimeTrackingPolicy": {
              "$ref": "#/definitions/LastAccessTimeTrackingPolicy",
              "description": "The blob service property to configure last access time based tracking policy."
            }
          },
          "x-ms-client-flatten": true,
          "x-ms-client-name": "BlobServiceProperties",
          "description": "The properties of a storage account’s Blob service."
        },
        "sku": {
          "$ref": "./common.json#/definitions/Sku",
          "readOnly": true,
          "description": "Sku name and tier."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v1/types.json#/definitions/Resource"
        }
      ],
      "description": "The properties of a storage account’s Blob service."
    },
    "BlobServiceItems": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlobServiceProperties"
          },
          "description": "List of blob services returned.",
          "readOnly": true
        }
      }
    },
    "ChangeFeed": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Indicates whether change feed event logging is enabled for the Blob service."
        },
        "retentionInDays": {
          "type": "integer",
          "minimum": 1,
          "maximum": 146000,
          "format": "int32",
          "description": "Indicates the duration of changeFeed retention in days. Minimum value is 1 day and maximum value is 146000 days (400 years). A null value indicates an infinite retention of the change feed."
        }
      },
      "description": "The blob service properties for change feed events."
    },
    "RestorePolicyProperties": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Blob restore is enabled if set to true."
        },
        "days": {
          "type": "integer",
          "minimum": 1,
          "maximum": 365,
          "description": "how long this blob can be restored. It should be great than zero and less than DeleteRetentionPolicy.days."
        },
        "lastEnabledTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "Deprecated in favor of minRestoreTime property."
        },
        "minRestoreTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "Returns the minimum date and time that the restore can be started."
        }
      },
      "required": [
        "enabled"
      ],
      "description": "The blob service properties for blob restore policy"
    },
    "LastAccessTimeTrackingPolicy": {
      "properties": {
        "enable": {
          "type": "boolean",
          "description": "When set to true last access time based tracking is enabled."
        },
        "name": {
          "type": "string",
          "description": "Name of the policy. The valid value is AccessTimeTracking. This field is currently read only",
          "enum": [
            "AccessTimeTracking"
          ],
          "x-ms-enum": {
            "name": "name",
            "modelAsString": true
          }
        },
        "trackingGranularityInDays": {
          "type": "integer",
          "format": "int32",
          "description": "The field specifies blob object tracking granularity in days, typically how often the blob object should be tracked.This field is currently read only with value as 1"
        },
        "blobType": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of predefined supported blob types. Only blockBlob is the supported value. This field is currently read only"
        }
      },
      "required": [
        "enable"
      ],
      "description": "The blob service properties for Last access time based tracking policy."
    },
    "LeaseContainerRequest": {
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "Acquire",
            "Renew",
            "Change",
            "Release",
            "Break"
          ],
          "description": "Specifies the lease action. Can be one of the available actions."
        },
        "leaseId": {
          "type": "string",
          "description": "Identifies the lease. Can be specified in any valid GUID string format."
        },
        "breakPeriod": {
          "type": "integer",
          "description": "Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60."
        },
        "leaseDuration": {
          "type": "integer",
          "description": "Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires."
        },
        "proposedLeaseId": {
          "type": "string",
          "description": "Optional for acquire, required for change. Proposed lease ID, in a GUID string format."
        }
      },
      "required": [
        "action"
      ],
      "description": "Lease Container request schema."
    },
    "LeaseContainerResponse": {
      "properties": {
        "leaseId": {
          "type": "string",
          "description": "Returned unique lease ID that must be included with any request to delete the container, or to renew, change, or release the lease."
        },
        "leaseTimeSeconds": {
          "type": "string",
          "description": "Approximate time remaining in the lease period, in seconds."
        }
      },
      "description": "Lease Container response schema."
    },
    "CloudError": {
      "x-ms-external": true,
      "properties": {
        "error": {
          "$ref": "#/definitions/CloudErrorBody"
        }
      },
      "description": "An error response from the Storage service."
    },
    "CloudErrorBody": {
      "x-ms-external": true,
      "properties": {
        "code": {
          "type": "string",
          "description": "An identifier for the error. Codes are invariant and are intended to be consumed programmatically."
        },
        "message": {
          "type": "string",
          "description": "A message describing the error, intended to be suitable for display in a user interface."
        },
        "target": {
          "type": "string",
          "description": "The target of the particular error. For example, the name of the property in error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudErrorBody"
          },
          "description": "A list of additional details about the error."
        }
      },
      "description": "An error response from the Storage service."
    }
  },
  "parameters": {
    "ContainerName": {
      "name": "containerName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.",
      "maxLength": 63,
      "minLength": 3,
      "x-ms-parameter-location": "method"
    },
    "ImmutabilityPolicyName": {
      "name": "immutabilityPolicyName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'",
      "enum": [
        "default"
      ],
      "x-ms-parameter-location": "method"
    },
    "BlobServicesName": {
      "name": "BlobServicesName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the blob Service within the specified storage account. Blob Service Name must be 'default'",
      "enum": [
        "default"
      ],
      "x-ms-parameter-location": "method"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/d6f1a561-6c6c-4c4c-a324-357c942cae36/oauth2/authorize",
      "tokenUrl": "https://login.microsoftonline.com/d6f1a561-6c6c-4c4c-a324-357c942cae36/oauth2/token,
      "flow": "authorizationCode",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}